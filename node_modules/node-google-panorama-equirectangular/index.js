var getPanoramaTiles = require('./lib/getPanoramaTiles')
var Emitter = require('events').EventEmitter
var each = require('./lib/loop');
var jimp = require('jimp');
var request = require('request').defaults({ encoding: null });

module.exports = loadImages

function loadImages(ids, opt) {
  if(typeof ids === 'string') ids = [ids]
  opt = opt || {}
  const emitter = new Emitter()
  let item = 0, state = 0
  process.nextTick(start)
  return emitter

  function check (finished, jpl, id) {
    emitter.emit('imageready', {
      finished,
      jimpImage: jpl,
      total: ids.length,
      id
    })
    if (finished <= ids.length) {
      emitter.emit('complete')
    }
  }

  function startOne(data, next, index) {
    loadImage(data, () => ++item).on('finished', (image) => {
      check(++state, image,ids[index])
      next()
    }).on('progress', (data) => {
      const progress = Math.floor(100 * data.current/(data.tilesCount * ids.length))
      emitter.emit('progress', progress)
    })
  }

  function start(){
    const allData = ids.map(id => {
      return getPanoramaTiles(id, opt)
    })
    each(allData, startOne)
    if(ids.length === 0) check(0)
  }
}

function loadImage (data, increment) {
  const emitter = new Emitter()
  process.nextTick(start)
  return emitter

  function requestTile({image, bigImage}, next, index) {
    request(image.url, (err, res, buffer) => {
      if(!buffer) return setTimeout(()=>{
        requestTile(image, next, index)
      },100)
      jimp.read(buffer).then(jpl => {
        emitter.emit('progress', {
          current: increment(),
          tilesCount: data.images.length
        })
        const {position} = image
        bigImage.blit(jpl, position[0], position[1]);
        next(err, 'a')
      })
    })
  }

  function start () {
    new jimp(data.width, data.height, 0x0, function (err, image) {
      data.images = data.images.map(i => ({image: i, bigImage: image}))
      each.chunk(data.images, 50, requestTile, (error, imagesResult) => {
        // imagesResult.forEach(chunkPart => {
        //   for (let i = 0; i < chunkPart.length; i++) {
        //     const {image : img, position} = chunkPart[i]
        //     image.blit(img, position[0], position[1]);
        //   }
        // })
        emitter.emit('finished', image)
      })

    });
  }
}